package bcit.comp2526.A2;

import static java.awt.Color.BLACK;

import java.awt.Color;
import java.awt.Component;

import javax.swing.JPanel;
import javax.swing.border.LineBorder;

/**
 * World class for creating our world.
 * 
 * @author DrN
 * @version 1.00
 */
public class World {
    private static LineBorder border = new LineBorder(BLACK, 1);
    private static final int RAND_MAX = 100;
    private static final int PLANT_PERCENTAGE = 30;
    private static final int HERB_PERCETANGE_MAX = 50;
    private int x;
    private int y;
    private Cell[][] worldGrid;

    /**
     * World constructor for making word by dimensions x,y.
     * 
     * @param x
     *            - the row dimension
     * @param y
     *            - the column dimension
     */
    public World(int x, int y) {
        this.x = x;
        this.y = y;
        // create the world
        worldGrid = new Cell[x][y];
        // generate the cells and the things that exist in the cells
        this.generateWorld();
    }

    /**
     * getRowCount returns the number of rows in the World.
     * 
     * @return - rows in the world integer.
     */
    public int getRowCount() {
        return this.x;
    }

    /**
     * getColumnCount returns the number of columns in the world.
     * 
     * @return - columns in the world integer.
     */
    public int getColumnCount() {
        return this.y;
    }

    /**
     * getCellAt returns the cell as a component.
     * 
     * @param row
     *            - row of the cell we're getting in world.
     * @param column
     *            - column of the cell we're getting in world.
     * @return - java component of Cell to display.
     */
    public Component getCellAt(int row, int column) {
        Cell currentCell = worldGrid[row][column];

        Entity currentSpecies = currentCell.getCellEntity();
        JPanel panel = currentCell.getPanel();
        // base panel colour on species type
        // for plant species
        if (currentSpecies.getGridColour() == GridColour.GREEN) {
            panel.setBackground(Color.GREEN);
            // for blank species
        } else if (currentSpecies.getGridColour() == GridColour.WHITE) {
            panel.setBackground(Color.WHITE);
            // for herbivores
        } else if (currentSpecies.getGridColour() == GridColour.YELLOW) {
            panel.setBackground(Color.YELLOW);
        }
        // setup the border for the component
        panel.setBorder(border);
        // return the panel we created
        return panel;
    }

    /**
     * getCellObject returns a cell object in row and column desired.
     * 
     * @param row
     *            - row we want to get a cell from in the world.
     * @param column
     *            - column we want to get a cell from in the world.
     * @return - The desired cell from the world.
     */
    public Cell getCellObject(int row, int column) {
        // check if we're in bounds
        if (row >= 0 && column >= 0 && row < x && column < y) {
            return worldGrid[row][column];
        }
        // return null if we're not.
        return null;
    }

    /**
     * generateWorld - generates the world full of random creatures and blanks.
     */
    public void generateWorld() {
        for (int i = 0; i < getRowCount(); i++) {
            for (int j = 0; j < getColumnCount(); j++) {
                int currentRand = RandomGenerator.nextNumber(RAND_MAX);

                Entity newEntity = new Entity(worldGrid[i][j],
                        GridColour.WHITE);
                if (currentRand <= PLANT_PERCENTAGE) {
                    newSpecies = new Plant(worldGrid[i][j]);
                } else if (currentRand > PLANT_PERCENTAGE
                        && currentRand <= HERB_PERCETANGE_MAX) {
                    newSpecies = new Herbivore(worldGrid[i][j]);
                } else {
                    // declare it as a blank spot on the grid
                    newSpecies = new Entity(worldGrid[i][j], GridColour.WHITE);
                }
                worldGrid[i][j] = new Cell(this, i, j, newSpecies);
                newSpecies.setCell(worldGrid[i][j]);
            }
        }
    }

    /**
     * takeTurn takes a turn in the world when executed.
     */
    public void takeTurn() {
        for (int i = 0; i < this.getRowCount(); i++) {
            for (int j = 0; j < this.getColumnCount(); j++) {
                Cell currentCell = this.getCellObject(i, j);
                if (currentCell != null) {
                    // check if this cell contains a herbivore
                    if (currentCell.getCellEntity()
                            .getClass() == Herbivore.class) {
                        // perform herb things
                        Herbivore herb = (Herbivore) currentCell
                                .getCellEntity();
                        herb.move();
                        if (herb.checkStarved()) {
                            Cell herbCell = herb.getLocation();
                            herbCell.setCellEntity(
                                    new Entity(herbCell, GridColour.WHITE));
                        }
                    }
                    if (currentCell.getCellEntity().getClass() == Plant.class) {
                        Plant curPlant = (Plant) currentCell.getCellEntity();
                        // attempt to reproduce plant
                        curPlant.seed();
                    }
                }
            }
        }
    }
}
